import asyncio
from datetime import datetime
from app.database import SessionLocal
from app.models import Counter, Ticket
from app.api.endpoints.realtime import notify_frontend
import pytz

vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")

async def check_and_call_next_for_counter(counter_id: int):
    db = SessionLocal()
    try:
        now = datetime.now(vn_tz)

        counter = db.query(Counter).filter(Counter.id == counter_id).first()
        if not counter:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y qu·∫ßy v·ªõi ID {counter_id}")
            return

        seats = counter.seats
        if not seats or len(seats) < 2:
            return

        officer_seat = next((s for s in seats if s.type == 'officer'), None)
        client_seat = next((s for s in seats if s.type == 'client'), None)

        if officer_seat is None or client_seat is None:
            return

        if not officer_seat.status:
            print(f"‚ö†Ô∏è Kh√¥ng c√≥ c√°n b·ªô ng·ªìi t·∫°i qu·∫ßy {counter.name}")
            return

        if officer_seat.status and not client_seat.status:
            # üëâ ƒê√°nh d·∫•u v√© ƒëang "called" (n·∫øu c√≥) th√†nh "done"
            current_ticket = (
                db.query(Ticket)
                .filter(
                    Ticket.status == "called",
                    Ticket.counter_id == counter.id
                )
                .order_by(Ticket.called_at.desc())  # ∆Øu ti√™n m·ªõi nh·∫•t n·∫øu c√≥ nhi·ªÅu
                .first()
            )
            if current_ticket:
                current_ticket.status = "done"
                current_ticket.finished_at = now  # n·∫øu c√≥ field th·ªùi gian k·∫øt th√∫c

            # üëâ G·ªçi v√© ti·∫øp theo
            next_ticket = (
                db.query(Ticket)
                .filter(
                    Ticket.status == "waiting",
                    Ticket.counter_id == counter.id
                )
                .order_by(Ticket.created_at)
                .first()
            )

            if next_ticket:
                print(f"üéØ G·ªçi v√© {next_ticket.number} t·∫°i qu·∫ßy {counter.name}")
                next_ticket.status = "called"
                next_ticket.called_at = now  # n·∫øu c√≥ field th·ªùi gian g·ªçi
                db.commit()

                await notify_frontend({
                    "event": "ticket_called",
                    "ticket_number": next_ticket.number,
                    "counter_name": counter.name
                })

    except Exception as e:
        print(f"‚ùå L·ªói khi auto-call cho qu·∫ßy {counter_id}: {e}")
    finally:
        db.close()
